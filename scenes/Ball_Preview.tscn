[gd_scene load_steps=13 format=2]

[ext_resource path="res://assets/images/hexagon_grid.png" type="Texture" id=1]
[ext_resource path="res://assets/images/particle_texture/spark_04.png" type="Texture" id=5]
[ext_resource path="res://models/HealthBar3D.tscn" type="PackedScene" id=6]

[sub_resource type="PhysicsMaterial" id=1]
friction = 0.0
bounce = 1.0

[sub_resource type="SphereMesh" id=2]
radius = 0.5
height = 1.0

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
render_mode depth_draw_opaque, cull_disabled, ambient_light_disabled, blend_add, shadows_disabled;

uniform vec4 color : hint_color;
uniform float fresnel_power = 1.0;
uniform float edge_intensity = 2.0;
uniform float fill_amount : hint_range(0, 1) = 0.1;

uniform float pulsing_strength = 0.25;
uniform float pulsing_speed = 1.0;

uniform float scanline_period = 0.5;
uniform float scanline_width : hint_range(0, 0.49) = 0.1;
uniform float scanline_intensity = 0.35;

uniform float pattern_scroll_speed = 0.025;
uniform vec2 pattern_uv_offset = vec2(6.0, 3.0);

uniform sampler2D pattern_texture : hint_albedo;

void vertex() {
	float pulse_distance = ((sin(TIME * pulsing_speed) * 0.1)) * pulsing_strength;
	VERTEX += NORMAL * pulse_distance;
}

void fragment() {
	//Create a fresnel effect from the NORMAL and VIEW vectors.
	float fresnel = pow(1.0 - dot(NORMAL, VIEW), fresnel_power) * edge_intensity;
	
	//Add back transparency in the middle
	fresnel = fresnel + fill_amount;
	
	//Get the raw linear depth from the depth texture into a  [-1, 1] range
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r * 2.0 - 1.0;
	//Recreate linear depth of the intersecting geometry using projection matrix, and subtract the vertex of the sphere
	depth = PROJECTION_MATRIX[3][2] / (depth + PROJECTION_MATRIX[2][2]) + VERTEX.z;
	//Intensity intersection effect
	depth = pow(1.0 - clamp(depth, 0, 1), fresnel_power) * edge_intensity;
	
	//Calculate final alpha using fresnel and depth joined together
	fresnel = fresnel + depth;
	
	//Calculate UV scrolling pattern
	float scrolling_time = TIME * pattern_scroll_speed;
	vec4 pattern = texture(pattern_texture, (UV * pattern_uv_offset) + vec2(scrolling_time));
	
	//Use pattern to cut holes in alpha
	fresnel *= pattern.r;
	
	float uv_offset = mod(-TIME * scanline_period, 2.0) - 1.0;
	float scanline = smoothstep(0.5 - scanline_width, 0.5, UV.y + uv_offset) * (1.0 - smoothstep(0.5, 0.5 + scanline_width, UV.y + uv_offset)) * pattern.r;
	
	//Apply final color
	ALBEDO = vec3(0);
	EMISSION = color.rgb;
	ALPHA = smoothstep(0.0, 1.0, fresnel + scanline * scanline_intensity);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/color = Color( 0.380392, 0, 0, 0.305882 )
shader_param/fresnel_power = 1.0
shader_param/edge_intensity = 1.0
shader_param/fill_amount = 0.058
shader_param/pulsing_strength = 0.0
shader_param/pulsing_speed = 1.0
shader_param/scanline_period = 0.5
shader_param/scanline_width = 0.1
shader_param/scanline_intensity = 0.35
shader_param/pattern_scroll_speed = 0.025
shader_param/pattern_uv_offset = Vector2( 3, 1 )
shader_param/pattern_texture = ExtResource( 1 )

[sub_resource type="SpatialMaterial" id=5]
flags_transparent = true
flags_unshaded = true
vertex_color_use_as_albedo = true
params_blend_mode = 1
params_billboard_mode = 3
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false
albedo_color = Color( 0.933333, 0.168627, 0.298039, 1 )
albedo_texture = ExtResource( 5 )

[sub_resource type="ParticlesMaterial" id=6]
gravity = Vector3( 0, 0, 0 )
angular_velocity = 16.74
angular_velocity_random = 1.0
angle = 360.0
angle_random = 1.0

[sub_resource type="QuadMesh" id=7]

[sub_resource type="ViewportTexture" id=19]
viewport_path = NodePath("Viewport")

[sub_resource type="SphereShape" id=20]
margin = 0.001
radius = 0.5

[node name="Ball" type="RigidBody"]
transform = Transform( 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0 )
input_ray_pickable = false
mass = 0.00102041
physics_material_override = SubResource( 1 )
gravity_scale = 0.0
custom_integrator = true
contacts_reported = 1
can_sleep = false
axis_lock_angular_x = true
axis_lock_angular_y = true
axis_lock_angular_z = true

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 2 )
material/0 = SubResource( 4 )

[node name="Particles" type="Particles" parent="."]
transform = Transform( 1.8, 0, 0, 0, 1.8, 0, 0, 0, 1.8, 0, 0, 0 )
visible = false
material_override = SubResource( 5 )
amount = 4
process_material = SubResource( 6 )
draw_pass_1 = SubResource( 7 )

[node name="OmniLight" type="OmniLight" parent="."]
light_color = Color( 1, 0, 0, 1 )
light_energy = 2.28
light_indirect_energy = 4.55

[node name="HealthBar3D" parent="." instance=ExtResource( 6 )]
transform = Transform( 0.6, 0, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0.7, 0 )
visible = false
texture = SubResource( 19 )

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 20 )

[connection signal="body_entered" from="." to="." method="_on_Ball_body_entered"]
