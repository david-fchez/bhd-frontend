[gd_scene load_steps=20 format=2]

[ext_resource path="res://scenes/Ball.gd" type="Script" id=2]
[ext_resource path="res://assets/images/particle_texture/spark_04.png" type="Texture" id=5]
[ext_resource path="res://models/HealthBar3D.tscn" type="PackedScene" id=6]

[sub_resource type="PhysicsMaterial" id=1]
friction = 0.0
bounce = 1.0

[sub_resource type="SphereMesh" id=2]
radius = 0.5
height = 1.0

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
//Simple 3D shader to create a force-field effect inspired by Faultless Defense from Guilty Gear Xrd.
//In summary, it takes logic used for simple rim lighting and uses it to create the alpha instead.

render_mode blend_mix,depth_draw_always,cull_back,diffuse_burley,specular_schlick_ggx;//depth_test_disable;
uniform vec4 albedo : hint_color;
uniform vec4 emission_color : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float emission_amount: hint_range(0.0, 16.0) = 5.0f; 
uniform float rim_steepness : hint_range(0.0f, 16.0f) = 3.0f; //higher values mean a smaller rim.
uniform vec3 uv_scale;
uniform vec3 uv_offset;


void vertex() {
	UV=UV*uv_scale.xy+uv_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	EMISSION = emission_color.rgb * emission_amount;
	float PI = 3.14159265359;
	float NdotV = dot(NORMAL, VIEW);
	float rim_light = pow(1.0 - NdotV, rim_steepness);
	ALPHA = rim_light * emission_color.a / PI;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/albedo = Color( 0.380392, 0.509804, 0.960784, 1 )
shader_param/emission_color = Color( 0.0588235, 0.129412, 0.882353, 1 )
shader_param/emission_amount = 8.96
shader_param/rim_steepness = 4.426
shader_param/uv_scale = null
shader_param/uv_offset = null

[sub_resource type="SphereMesh" id=8]

[sub_resource type="Shader" id=9]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_front, specular_schlick_ggx, depth_test_disable, ensure_correct_normals, shadows_disabled, ambient_light_disabled;

uniform sampler2D tex_frg_32;
uniform sampler2D tex_frg_3;
uniform vec4 MainColor : hint_color;
uniform vec4 BackColor1 : hint_color;
uniform vec4 BackColor2 : hint_color;
uniform float Brightness;


void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorDecompose:9
	float n_out9p0 = n_out2p0.x;
	float n_out9p1 = n_out2p0.y;
	float n_out9p2 = n_out2p0.z;

// ScalarSmoothStep:20
	float n_in20p0 = 0.00000;
	float n_in20p1 = 0.20000;
	float n_out20p0 = smoothstep(n_in20p0, n_in20p1, n_out9p1);

// Input:34
	float n_out34p0 = TIME;

// ScalarOp:35
	float n_in35p1 = -0.20000;
	float n_out35p0 = n_out34p0 * n_in35p1;

// ScalarOp:36
	float n_in36p1 = -0.30000;
	float n_out36p0 = n_out34p0 * n_in36p1;

// VectorCompose:37
	float n_in37p2 = 0.00000;
	vec3 n_out37p0 = vec3(n_out35p0, n_out36p0, n_in37p2);

// VectorOp:38
	vec3 n_out38p0 = n_out37p0 + n_out2p0;

// VectorOp:53
	vec3 n_in53p1 = vec3(1.00000, 4.00000, 1.00000);
	vec3 n_out53p0 = n_out38p0 * n_in53p1;

// Texture:32
	vec4 tex_frg_32_read = texture(tex_frg_32, n_out53p0.xy);
	vec3 n_out32p0 = tex_frg_32_read.rgb;
	float n_out32p1 = tex_frg_32_read.a;

// ScalarOp:54
	float n_out54p0 = n_out20p0 - dot(n_out32p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:56
	float n_out56p0 = n_out54p0 + n_out9p1;

// ScalarClamp:52
	float n_in52p1 = 0.00000;
	float n_in52p2 = 1.00000;
	float n_out52p0 = clamp(n_out56p0, n_in52p1, n_in52p2);

// Input:60
	vec3 n_out60p0 = vec3(SCREEN_UV, 0.0);

// Input:6
	float n_out6p0 = TIME;

// ScalarOp:7
	float n_in7p1 = 0.10000;
	float n_out7p0 = n_out6p0 * n_in7p1;

// ScalarOp:8
	float n_in8p1 = -0.20000;
	float n_out8p0 = n_out6p0 * n_in8p1;

// VectorCompose:5
	float n_in5p2 = 0.00000;
	vec3 n_out5p0 = vec3(n_out7p0, n_out8p0, n_in5p2);

// VectorOp:4
	vec3 n_out4p0 = n_out5p0 + n_out2p0;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out4p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// VectorOp:33
	vec3 n_out33p0 = n_out32p0 * n_out3p0;

// ScalarSmoothStep:70
	float n_in70p0 = 0.20000;
	float n_in70p1 = 0.80000;
	float n_out70p0 = smoothstep(n_in70p0, n_in70p1, n_out9p1);

// VectorOp:66
	vec3 n_out66p0 = n_out33p0 * vec3(n_out70p0);

// VectorOp:65
	vec3 n_out65p0 = n_out60p0 + n_out66p0;

// Input:61
	vec3 n_out61p0 = NORMAL;

// Fresnel:62
	float n_in62p3 = 1.00000;
	float n_out62p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in62p3);

// VectorScalarMix:63
	vec3 n_out63p0 = mix(n_out65p0, n_out61p0, n_out62p0);

// Input:58

// Texture:59
	vec3 n_out59p0;
	float n_out59p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out63p0.xy);
		n_out59p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out59p1 = SCREEN_TEXTURE_tex_read.a;
	}

// ColorUniform:80
	vec3 n_out80p0 = MainColor.rgb;
	float n_out80p1 = MainColor.a;

// ColorUniform:78
	vec3 n_out78p0 = BackColor1.rgb;
	float n_out78p1 = BackColor1.a;

// ColorUniform:79
	vec3 n_out79p0 = BackColor2.rgb;
	float n_out79p1 = BackColor2.a;

// Input:72
	float n_out72p0 = TIME;

// ScalarFunc:71
	float n_out71p0 = sin(n_out72p0);

// ScalarOp:74
	float n_in74p1 = 1.00000;
	float n_out74p0 = n_out71p0 + n_in74p1;

// ScalarOp:75
	float n_in75p1 = 2.00000;
	float n_out75p0 = n_out74p0 / n_in75p1;

// VectorScalarMix:73
	vec3 n_out73p0 = mix(n_out78p0, n_out79p0, n_out75p0);

// VectorScalarMix:49
	vec3 n_out49p0 = mix(n_out80p0, n_out73p0, n_out9p1);

// ScalarSmoothStep:46
	float n_in46p0 = 1.00000;
	float n_in46p1 = 0.00000;
	float n_out46p0 = smoothstep(n_in46p0, n_in46p1, n_out9p1);

// VectorScalarMix:27
	vec3 n_in27p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out27p0 = mix(n_out49p0, n_in27p1, n_out46p0);

// Color:69
	vec3 n_out69p0 = vec3(0.025314, 0.034936, 0.137276);
	float n_out69p1 = 1.000000;

// ScalarOp:67
	float n_out67p0 = dot(n_out33p0, vec3(0.333333, 0.333333, 0.333333)) * n_out46p0;

// VectorScalarMix:68
	vec3 n_out68p0 = mix(n_out27p0, n_out69p0, n_out67p0);

// ScalarUniform:77
	float n_out77p0 = Brightness;

// VectorOp:51
	vec3 n_out51p0 = n_out68p0 * vec3(n_out77p0);

// VectorScalarMix:64
	vec3 n_out64p0 = mix(n_out59p0, n_out51p0, n_out62p0);

// Output:0
	ALPHA = n_out52p0;
	EMISSION = n_out64p0;

}

void light() {
// Output:0

}
"

[sub_resource type="OpenSimplexNoise" id=10]
seed = 1
octaves = 5
period = 224.0
persistence = 0.113
lacunarity = 1.31

[sub_resource type="NoiseTexture" id=11]
seamless = true
noise = SubResource( 10 )

[sub_resource type="OpenSimplexNoise" id=12]
period = 140.8
persistence = 0.475
lacunarity = 1.56

[sub_resource type="NoiseTexture" id=13]
seamless = true
noise = SubResource( 12 )

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 9 )
shader_param/MainColor = Color( 0.243137, 0.12549, 0.8, 0.686275 )
shader_param/BackColor1 = Color( 0.160784, 0.121569, 0.819608, 0.454902 )
shader_param/BackColor2 = Color( 0.251724, 0.114258, 0.914063, 0.376471 )
shader_param/Brightness = 1.0
shader_param/tex_frg_32 = SubResource( 13 )
shader_param/tex_frg_3 = SubResource( 11 )

[sub_resource type="SpatialMaterial" id=16]
flags_unshaded = true
vertex_color_use_as_albedo = true
params_blend_mode = 1
params_billboard_mode = 3
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false
albedo_texture = ExtResource( 5 )

[sub_resource type="ParticlesMaterial" id=17]
gravity = Vector3( 0, 0, 0 )
angular_velocity = 16.74
angular_velocity_random = 1.0
angle = 360.0
angle_random = 1.0
color = Color( 0.2, 0.227451, 0.745098, 1 )

[sub_resource type="QuadMesh" id=18]

[sub_resource type="ViewportTexture" id=19]
viewport_path = NodePath("Viewport")

[sub_resource type="SphereShape" id=20]
margin = 0.001
radius = 0.48

[node name="Ball" type="RigidBody"]
input_ray_pickable = false
mass = 0.01
physics_material_override = SubResource( 1 )
gravity_scale = 0.0
custom_integrator = true
contacts_reported = 1
axis_lock_angular_x = true
axis_lock_angular_y = true
axis_lock_angular_z = true
script = ExtResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 2 )
material/0 = SubResource( 4 )

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 0.3, 0, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0 )
mesh = SubResource( 8 )
material/0 = SubResource( 14 )

[node name="OmniLight" type="OmniLight" parent="."]
light_color = Color( 0.32549, 0.470588, 0.964706, 1 )
light_energy = 4.976
light_indirect_energy = 5.81

[node name="Particles" type="Particles" parent="."]
transform = Transform( 1.8, 0, 0, 0, 1.8, 0, 0, 0, 1.8, 0, 0, 0 )
material_override = SubResource( 16 )
amount = 4
process_material = SubResource( 17 )
draw_pass_1 = SubResource( 18 )

[node name="HealthBar3D" parent="." instance=ExtResource( 6 )]
transform = Transform( 0.6, 0, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0.7, 0 )
visible = false
texture = SubResource( 19 )

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 20 )

[connection signal="body_entered" from="." to="." method="_on_Ball_body_entered"]
