[gd_scene load_steps=7 format=2]

[sub_resource type="PhysicsMaterial" id=1]
friction = 0.0
bounce = 1.0

[sub_resource type="SphereMesh" id=2]
radius = 0.5
height = 1.0

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
//render_mode blend_mix,depth_draw_always,cull_back,diffuse_burley,specular_schlick_ggx;//depth_test_disable;

uniform float NUM_RAYS = 13;
uniform int VOLUMETRIC_STEPS = 19;
uniform int MAX_ITER = 35;
uniform float FAR = 6.0;
uniform sampler2D pattern_texture : hint_albedo;

float getTime()
{
	return TIME*1.1;
}

mat2 mm2(float a)
{
	float c = cos(a);
	float s = sin(a);
	return mat2(vec2(c, -s), vec2(s, c));
}

float noise( float x )
{
	return textureLod(pattern_texture, vec2(x*.01,1.),0.0).x;
}

float hash( float n ){return fract(sin(n)*43758.5453);}

float noiseVec(vec3 p)
{
	vec3 ip = floor(p);
    vec3 fp = fract(p);
	fp = fp*fp*(3.0-2.0*fp);
	
	vec2 tap = (ip.xy+vec2(37.0,17.0)*ip.z) + fp.xy;
	vec2 rg = textureLod(pattern_texture, (tap + 0.5)/256.0, 0.0 ).yx;
	return mix(rg.x, rg.y, fp.z);
}

mat3 m3()
{
	return mat3(vec3( 0.00,  0.80,  0.60),
              vec3(-0.80,  0.36, -0.48),
              vec3(-0.60, -0.48,  0.64 ));
} 


//See: https://www.shadertoy.com/view/XdfXRj
float flow(vec3 p, float t)
{
	float z=2.;
	float rz = 0.;
	vec3 bp = p;
	for (float i= 1.;i < 5.;i++ )
	{
		p += getTime()*.1;
		rz+= (sin(noiseVec(p+t*0.8)*6.)*0.5+0.5) /z;
		p = mix(bp,p,0.6);
		z *= 2.;
		p *= 2.01;
        p *= m3();
	}
	return rz;	
}

//could be improved
float sins(in float x)
{
 	float rz = 0.;
    float z = 2.;
    for (float i= 0.;i < 3.;i++ )
	{
        rz += abs(fract(x*1.4)-0.5)/z;
        x *= 1.3;
        z *= 1.15;
        x -= getTime()*.65*z;
    }
    return rz;
}

float segm( vec3 p, vec3 a, vec3 b)
{
    vec3 pa = p - a;
	vec3 ba = b - a;
	float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1. );	
	return length( pa - ba*h )*.5;
}

vec3 path(in float i, in float d)
{
    vec3 en = vec3(0.,0.,1.);
    float sns2 = sins(d+i*0.5)*0.22;
    float sns = sins(d+i*.6)*0.21;
    en.xz *= mm2((hash(i*10.569)-.5)*6.2+sns2);
    en.xy *= mm2((hash(i*4.732)-.5)*6.2+sns);
    return en;
}

vec2 map(vec3 p, float i)
{
	float lp = length(p);
    vec3 bg = vec3(0.);   
    vec3 en = path(i,lp);
    
    float ins = smoothstep(0.11,.46,lp);
    float outs = .15+smoothstep(.0,.15,abs(lp-1.));
    p *= ins*outs;
    float id = ins*outs;
    
    float rz = segm(p, bg, en)-0.011;
    return vec2(rz,id);
}

float march(in vec3 ro, in vec3 rd, in float startf, in float maxd, in float j)
{
	float precis = 0.001;
    float h=0.5;
    float d = startf;
    for( int i=0; i<MAX_ITER; i++ )
    {
        if( abs(h)<precis||d>maxd ) break;
        d += h*1.2;
	    float res = map(ro+rd*d, j).x;
        h = res;
    }
	return d;
}

//volumetric marching
vec3 vmarch(in vec3 ro, in vec3 rd, in float j, in vec3 orig)
{   
    vec3 p = ro;
    vec2 r = vec2(0.);
    vec3 sum = vec3(0);
    float w = 0.;
    for( int i=0; i<VOLUMETRIC_STEPS; i++ )
    {
        r = map(p,j);
        p += rd*.03;
        float lp = length(p);
        
        vec3 col = sin(vec3(1.05,2.5,1.52)*3.94+r.y)*.85+0.4;
        col.rgb *= smoothstep(.0,.015,-r.x);
        col *= smoothstep(0.04,.2,abs(lp-1.1));
        col *= smoothstep(0.1,.34,lp);
        sum += abs(col)*5. * (1.2-noise(lp*2.+j*13.+getTime()*5.)*1.1) / (log(distance(p,orig)-2.)+.75);
    }
    return sum;
}

//returns both collision dists of unit sphere
vec2 iSphere2(in vec3 ro, in vec3 rd)
{
    vec3 oc = ro;
    float b = dot(oc, rd);
    float c = dot(oc,oc) - 1.;
    float h = b*b - c;
    if(h <0.0) return vec2(-1.);
    else return vec2((-b - sqrt(h)), (-b + sqrt(h)));
}



void fragment()
{	
	//vec2 um = VERTEX.xy / UV.xy;
	vec2 p = NORMAL.xy /2.;//FRAGCOORD.xy-0.5;
	//p -= um;
	//p.x*=FRAGCOORD.x/FRAGCOORD.y;
    
	//camera
	vec3 ro = vec3(0.,0.,5.);
    vec3 rd = normalize(vec3(p*.7,-1.5));
    mat2 mx = mm2(getTime()*.4);
    mat2 my = mm2(getTime()*0.3); 
    ro.xz *= mx;rd.xz *= mx;
    ro.xy *= my;rd.xy *= my;
    
    vec3 bro = ro;
    vec3 brd = rd;
	
    vec3 col = vec3(0.0125,0.,0.025);
    for (float j = 1.; j<NUM_RAYS+1. ;j++)
    {
        ro = bro;
        rd = brd;
        mat2 mm = mm2((getTime()*0.1+((j+1.)*5.1))*j*0.25);
        ro.xy *= mm;rd.xy *= mm;
        ro.xz *= mm;rd.xz *= mm;
        float rz = march(ro,rd,2.5,FAR,j);
		if ( rz >= FAR)continue;
    	vec3 pos = ro+rz*rd;
    	col = max(col,vmarch(pos,rd,j, bro));
    }
    
    ro = bro;
    rd = brd;
    //vec2 sph = iSphere2(ro,rd);
    
    //if (sph.x > 0.)
    //{
        vec3 pos = ro+rd/.5;//*sph.x;
        vec3 pos2 = ro+rd+50.;//*sph.y;
        vec3 rf = reflect( rd, pos );
        vec3 rf2 = reflect( rd, pos2 );
        float nz = (-log(abs(flow(rf*1.2,getTime())-.01)));
        float nz2 = (-log(abs(flow(rf2*1.2,-getTime())-.01)));
        col += (0.1*nz*nz* vec3(0.12,0.12,.5) + 0.05*nz2*nz2*vec3(0.55,0.2,.55))*0.8;
    //}
    ALPHA = 1.0;
	ALBEDO = col*1.3;
}"

[sub_resource type="StreamTexture" id=21]

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/NUM_RAYS = 25.0
shader_param/VOLUMETRIC_STEPS = 19
shader_param/MAX_ITER = 35
shader_param/FAR = 6.0
shader_param/pattern_texture = SubResource( 21 )

[sub_resource type="SphereShape" id=20]
margin = 0.001
radius = 0.48

[node name="Ball" type="RigidBody"]
input_ray_pickable = false
mass = 0.01
physics_material_override = SubResource( 1 )
gravity_scale = 0.0
custom_integrator = true
contacts_reported = 1
axis_lock_angular_x = true
axis_lock_angular_y = true
axis_lock_angular_z = true

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 2 )
material/0 = SubResource( 4 )

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 20 )
